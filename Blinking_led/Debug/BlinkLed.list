
BlinkLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dac  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000edc  08000edc  00010edc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ef0  08000ef0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000ef0  08000ef0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ef0  08000ef0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ef0  08000ef0  00010ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ef4  08000ef4  00010ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021bc  20000008  08000f00  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021c4  08000f00  000221c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY
 13 .debug_info   000042cb  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011ff  00000000  00000000  0002433f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000017f4  00000000  00000000  0002553e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000003e8  00000000  00000000  00026d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000043f  00000000  00000000  00027120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000189b  00000000  00000000  0002755f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00005e5e  00000000  00000000  00028dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00012828  00000000  00000000  0002ec58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000978  00000000  00000000  00041480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00041df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ec4 	.word	0x08000ec4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08000ec4 	.word	0x08000ec4

08000170 <vListInitialise>:
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000170:	f04f 32ff 	mov.w	r2, #4294967295
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000174:	f100 0308 	add.w	r3, r0, #8

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	e9c0 2302 	strd	r2, r3, [r0, #8]
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800017c:	6043      	str	r3, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800017e:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000180:	2300      	movs	r3, #0
 8000182:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000184:	4770      	bx	lr

08000186 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000186:	2300      	movs	r3, #0
 8000188:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800018a:	4770      	bx	lr

0800018c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800018c:	b530      	push	{r4, r5, lr}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800018e:	680c      	ldr	r4, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000190:	1c63      	adds	r3, r4, #1
 8000192:	d10a      	bne.n	80001aa <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000194:	6903      	ldr	r3, [r0, #16]
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000196:	685a      	ldr	r2, [r3, #4]
 8000198:	604a      	str	r2, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800019a:	6091      	str	r1, [r2, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800019c:	608b      	str	r3, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 800019e:	6059      	str	r1, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
 80001a0:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
 80001a2:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 80001a4:	3301      	adds	r3, #1
 80001a6:	6003      	str	r3, [r0, #0]
}
 80001a8:	bd30      	pop	{r4, r5, pc}
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80001aa:	f100 0208 	add.w	r2, r0, #8
 80001ae:	4613      	mov	r3, r2
 80001b0:	6852      	ldr	r2, [r2, #4]
 80001b2:	6815      	ldr	r5, [r2, #0]
 80001b4:	42a5      	cmp	r5, r4
 80001b6:	d9fa      	bls.n	80001ae <vListInsert+0x22>
 80001b8:	e7ed      	b.n	8000196 <vListInsert+0xa>

080001ba <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80001ba:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80001bc:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80001c0:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80001c2:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80001c4:	6859      	ldr	r1, [r3, #4]
 80001c6:	4281      	cmp	r1, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80001c8:	bf08      	it	eq
 80001ca:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80001cc:	2200      	movs	r2, #0
 80001ce:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 80001d0:	681a      	ldr	r2, [r3, #0]
 80001d2:	3a01      	subs	r2, #1
 80001d4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80001d6:	6818      	ldr	r0, [r3, #0]
}
 80001d8:	4770      	bx	lr
	...

080001dc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80001dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80001de:	4b21      	ldr	r3, [pc, #132]	; (8000264 <prvAddCurrentTaskToDelayedList+0x88>)
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80001e0:	4c21      	ldr	r4, [pc, #132]	; (8000268 <prvAddCurrentTaskToDelayedList+0x8c>)
{
 80001e2:	4606      	mov	r6, r0
    const TickType_t xConstTickCount = xTickCount;
 80001e4:	681d      	ldr	r5, [r3, #0]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80001e6:	6820      	ldr	r0, [r4, #0]
{
 80001e8:	460f      	mov	r7, r1
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80001ea:	3004      	adds	r0, #4
 80001ec:	f7ff ffe5 	bl	80001ba <uxListRemove>
 80001f0:	b940      	cbnz	r0, 8000204 <prvAddCurrentTaskToDelayedList+0x28>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80001f2:	6822      	ldr	r2, [r4, #0]
 80001f4:	491d      	ldr	r1, [pc, #116]	; (800026c <prvAddCurrentTaskToDelayedList+0x90>)
 80001f6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80001f8:	2201      	movs	r2, #1
 80001fa:	680b      	ldr	r3, [r1, #0]
 80001fc:	4082      	lsls	r2, r0
 80001fe:	ea23 0302 	bic.w	r3, r3, r2
 8000202:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000204:	1c73      	adds	r3, r6, #1
 8000206:	d114      	bne.n	8000232 <prvAddCurrentTaskToDelayedList+0x56>
 8000208:	b19f      	cbz	r7, 8000232 <prvAddCurrentTaskToDelayedList+0x56>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800020a:	4b19      	ldr	r3, [pc, #100]	; (8000270 <prvAddCurrentTaskToDelayedList+0x94>)
 800020c:	6821      	ldr	r1, [r4, #0]
 800020e:	685a      	ldr	r2, [r3, #4]
 8000210:	6890      	ldr	r0, [r2, #8]
 8000212:	608a      	str	r2, [r1, #8]
 8000214:	6821      	ldr	r1, [r4, #0]
 8000216:	60c8      	str	r0, [r1, #12]
 8000218:	6821      	ldr	r1, [r4, #0]
 800021a:	6890      	ldr	r0, [r2, #8]
 800021c:	3104      	adds	r1, #4
 800021e:	6041      	str	r1, [r0, #4]
 8000220:	6821      	ldr	r1, [r4, #0]
 8000222:	3104      	adds	r1, #4
 8000224:	6091      	str	r1, [r2, #8]
 8000226:	6822      	ldr	r2, [r4, #0]
 8000228:	6153      	str	r3, [r2, #20]
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	3201      	adds	r2, #1
 800022e:	601a      	str	r2, [r3, #0]

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8000230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000232:	6823      	ldr	r3, [r4, #0]
 8000234:	19ad      	adds	r5, r5, r6
 8000236:	605d      	str	r5, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8000238:	d307      	bcc.n	800024a <prvAddCurrentTaskToDelayedList+0x6e>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800023a:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <prvAddCurrentTaskToDelayedList+0x98>)
 800023c:	6818      	ldr	r0, [r3, #0]
 800023e:	6821      	ldr	r1, [r4, #0]
}
 8000240:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000244:	3104      	adds	r1, #4
 8000246:	f7ff bfa1 	b.w	800018c <vListInsert>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800024a:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <prvAddCurrentTaskToDelayedList+0x9c>)
 800024c:	6818      	ldr	r0, [r3, #0]
 800024e:	6821      	ldr	r1, [r4, #0]
 8000250:	3104      	adds	r1, #4
 8000252:	f7ff ff9b 	bl	800018c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8000256:	4b09      	ldr	r3, [pc, #36]	; (800027c <prvAddCurrentTaskToDelayedList+0xa0>)
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	42aa      	cmp	r2, r5
                        xNextTaskUnblockTime = xTimeToWake;
 800025c:	bf88      	it	hi
 800025e:	601d      	strhi	r5, [r3, #0]
}
 8000260:	e7e6      	b.n	8000230 <prvAddCurrentTaskToDelayedList+0x54>
 8000262:	bf00      	nop
 8000264:	20000120 	.word	0x20000120
 8000268:	20000024 	.word	0x20000024
 800026c:	200000a4 	.word	0x200000a4
 8000270:	200000f8 	.word	0x200000f8
 8000274:	2000002c 	.word	0x2000002c
 8000278:	20000028 	.word	0x20000028
 800027c:	200000d4 	.word	0x200000d4

08000280 <prvResetNextTaskUnblockTime>:
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000280:	4a06      	ldr	r2, [pc, #24]	; (800029c <prvResetNextTaskUnblockTime+0x1c>)
 8000282:	6813      	ldr	r3, [r2, #0]
 8000284:	6819      	ldr	r1, [r3, #0]
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <prvResetNextTaskUnblockTime+0x20>)
 8000288:	b919      	cbnz	r1, 8000292 <prvResetNextTaskUnblockTime+0x12>
        xNextTaskUnblockTime = portMAX_DELAY;
 800028a:	f04f 32ff 	mov.w	r2, #4294967295
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800028e:	601a      	str	r2, [r3, #0]
}
 8000290:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000292:	6812      	ldr	r2, [r2, #0]
 8000294:	68d2      	ldr	r2, [r2, #12]
 8000296:	6812      	ldr	r2, [r2, #0]
 8000298:	e7f9      	b.n	800028e <prvResetNextTaskUnblockTime+0xe>
 800029a:	bf00      	nop
 800029c:	20000028 	.word	0x20000028
 80002a0:	200000d4 	.word	0x200000d4

080002a4 <prvIdleTask>:
{
 80002a4:	b580      	push	{r7, lr}
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80002a6:	4c15      	ldr	r4, [pc, #84]	; (80002fc <prvIdleTask+0x58>)
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80002a8:	4f15      	ldr	r7, [pc, #84]	; (8000300 <prvIdleTask+0x5c>)
                    --uxCurrentNumberOfTasks;
 80002aa:	4e16      	ldr	r6, [pc, #88]	; (8000304 <prvIdleTask+0x60>)
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80002ac:	6823      	ldr	r3, [r4, #0]
 80002ae:	b973      	cbnz	r3, 80002ce <prvIdleTask+0x2a>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80002b0:	4b15      	ldr	r3, [pc, #84]	; (8000308 <prvIdleTask+0x64>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d9f8      	bls.n	80002aa <prvIdleTask+0x6>
                    taskYIELD();
 80002b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80002bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80002c4:	f3bf 8f4f 	dsb	sy
 80002c8:	f3bf 8f6f 	isb	sy
 80002cc:	e7ed      	b.n	80002aa <prvIdleTask+0x6>
                taskENTER_CRITICAL();
 80002ce:	f000 fb09 	bl	80008e4 <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	68dd      	ldr	r5, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80002d6:	1d28      	adds	r0, r5, #4
 80002d8:	f7ff ff6f 	bl	80001ba <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80002dc:	6833      	ldr	r3, [r6, #0]
 80002de:	3b01      	subs	r3, #1
 80002e0:	6033      	str	r3, [r6, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80002e2:	6823      	ldr	r3, [r4, #0]
 80002e4:	3b01      	subs	r3, #1
 80002e6:	6023      	str	r3, [r4, #0]
                taskEXIT_CRITICAL();
 80002e8:	f000 fb0c 	bl	8000904 <vPortExitCritical>
                vPortFreeStack( pxTCB->pxStack );
 80002ec:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80002ee:	f000 fc23 	bl	8000b38 <vPortFree>
                vPortFree( pxTCB );
 80002f2:	4628      	mov	r0, r5
 80002f4:	f000 fc20 	bl	8000b38 <vPortFree>
    }
 80002f8:	e7d8      	b.n	80002ac <prvIdleTask+0x8>
 80002fa:	bf00      	nop
 80002fc:	20000098 	.word	0x20000098
 8000300:	2000010c 	.word	0x2000010c
 8000304:	20000094 	.word	0x20000094
 8000308:	20000030 	.word	0x20000030

0800030c <xTaskCreate>:
    {
 800030c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000310:	ea4f 0a82 	mov.w	sl, r2, lsl #2
    {
 8000314:	4607      	mov	r7, r0
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000316:	4650      	mov	r0, sl
    {
 8000318:	460e      	mov	r6, r1
 800031a:	4698      	mov	r8, r3
 800031c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000320:	f000 fb86 	bl	8000a30 <pvPortMalloc>
                if( pxStack != NULL )
 8000324:	4605      	mov	r5, r0
 8000326:	b160      	cbz	r0, 8000342 <xTaskCreate+0x36>
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000328:	204c      	movs	r0, #76	; 0x4c
 800032a:	f000 fb81 	bl	8000a30 <pvPortMalloc>
                    if( pxNewTCB != NULL )
 800032e:	4604      	mov	r4, r0
 8000330:	b120      	cbz	r0, 800033c <xTaskCreate+0x30>
                        pxNewTCB->pxStack = pxStack;
 8000332:	6305      	str	r5, [r0, #48]	; 0x30
    if( pcName != NULL )
 8000334:	b946      	cbnz	r6, 8000348 <xTaskCreate+0x3c>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000336:	f880 6034 	strb.w	r6, [r0, #52]	; 0x34
 800033a:	e013      	b.n	8000364 <xTaskCreate+0x58>
                        vPortFreeStack( pxStack );
 800033c:	4628      	mov	r0, r5
 800033e:	f000 fbfb 	bl	8000b38 <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000342:	f04f 35ff 	mov.w	r5, #4294967295
 8000346:	e094      	b.n	8000472 <xTaskCreate+0x166>
 8000348:	1e73      	subs	r3, r6, #1
 800034a:	f100 0233 	add.w	r2, r0, #51	; 0x33
 800034e:	360f      	adds	r6, #15
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000350:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8000354:	f802 1f01 	strb.w	r1, [r2, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
 8000358:	b109      	cbz	r1, 800035e <xTaskCreate+0x52>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800035a:	42b3      	cmp	r3, r6
 800035c:	d1f8      	bne.n	8000350 <xTaskCreate+0x44>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800035e:	2300      	movs	r3, #0
 8000360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000366:	1d26      	adds	r6, r4, #4
 8000368:	2b04      	cmp	r3, #4
 800036a:	bf28      	it	cs
 800036c:	2304      	movcs	r3, #4
 800036e:	469b      	mov	fp, r3
    pxNewTCB->uxPriority = uxPriority;
 8000370:	62e3      	str	r3, [r4, #44]	; 0x2c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000372:	4630      	mov	r0, r6
 8000374:	f7ff ff07 	bl	8000186 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000378:	f104 0018 	add.w	r0, r4, #24
 800037c:	f7ff ff03 	bl	8000186 <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000380:	f1cb 0305 	rsb	r3, fp, #5
 8000384:	61a3      	str	r3, [r4, #24]
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000386:	2300      	movs	r3, #0
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000388:	f1aa 0a04 	sub.w	sl, sl, #4
 800038c:	4455      	add	r5, sl
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800038e:	4642      	mov	r2, r8
 8000390:	4639      	mov	r1, r7
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000392:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000394:	6264      	str	r4, [r4, #36]	; 0x24
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000396:	6463      	str	r3, [r4, #68]	; 0x44
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000398:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800039c:	f025 0007 	bic.w	r0, r5, #7
 80003a0:	f000 fa76 	bl	8000890 <pxPortInitialiseStack>
 80003a4:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 80003a6:	f1b9 0f00 	cmp.w	r9, #0
 80003aa:	d001      	beq.n	80003b0 <xTaskCreate+0xa4>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80003ac:	f8c9 4000 	str.w	r4, [r9]
    taskENTER_CRITICAL();
 80003b0:	f000 fa98 	bl	80008e4 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 80003b4:	4b36      	ldr	r3, [pc, #216]	; (8000490 <xTaskCreate+0x184>)
        if( pxCurrentTCB == NULL )
 80003b6:	4f37      	ldr	r7, [pc, #220]	; (8000494 <xTaskCreate+0x188>)
        uxCurrentNumberOfTasks++;
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8000498 <xTaskCreate+0x18c>
 80003be:	3201      	adds	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
        if( pxCurrentTCB == NULL )
 80003c2:	683d      	ldr	r5, [r7, #0]
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d157      	bne.n	8000478 <xTaskCreate+0x16c>
            pxCurrentTCB = pxNewTCB;
 80003c8:	603c      	str	r4, [r7, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d11f      	bne.n	8000410 <xTaskCreate+0x104>
 80003d0:	46c1      	mov	r9, r8
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80003d2:	4648      	mov	r0, r9
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80003d4:	3501      	adds	r5, #1
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80003d6:	f7ff fecb 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80003da:	2d05      	cmp	r5, #5
 80003dc:	f109 0914 	add.w	r9, r9, #20
 80003e0:	d1f7      	bne.n	80003d2 <xTaskCreate+0xc6>
    vListInitialise( &xDelayedTaskList1 );
 80003e2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800049c <xTaskCreate+0x190>
    vListInitialise( &xDelayedTaskList2 );
 80003e6:	4d2e      	ldr	r5, [pc, #184]	; (80004a0 <xTaskCreate+0x194>)
    vListInitialise( &xDelayedTaskList1 );
 80003e8:	4648      	mov	r0, r9
 80003ea:	f7ff fec1 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80003ee:	4628      	mov	r0, r5
 80003f0:	f7ff febe 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80003f4:	482b      	ldr	r0, [pc, #172]	; (80004a4 <xTaskCreate+0x198>)
 80003f6:	f7ff febb 	bl	8000170 <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 80003fa:	482b      	ldr	r0, [pc, #172]	; (80004a8 <xTaskCreate+0x19c>)
 80003fc:	f7ff feb8 	bl	8000170 <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 8000400:	482a      	ldr	r0, [pc, #168]	; (80004ac <xTaskCreate+0x1a0>)
 8000402:	f7ff feb5 	bl	8000170 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8000406:	4b2a      	ldr	r3, [pc, #168]	; (80004b0 <xTaskCreate+0x1a4>)
 8000408:	f8c3 9000 	str.w	r9, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800040c:	4b29      	ldr	r3, [pc, #164]	; (80004b4 <xTaskCreate+0x1a8>)
 800040e:	601d      	str	r5, [r3, #0]
        prvAddTaskToReadyList( pxNewTCB );
 8000410:	2501      	movs	r5, #1
        uxTaskNumber++;
 8000412:	4a29      	ldr	r2, [pc, #164]	; (80004b8 <xTaskCreate+0x1ac>)
        prvAddTaskToReadyList( pxNewTCB );
 8000414:	4929      	ldr	r1, [pc, #164]	; (80004bc <xTaskCreate+0x1b0>)
        uxTaskNumber++;
 8000416:	6813      	ldr	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
 8000418:	6808      	ldr	r0, [r1, #0]
        uxTaskNumber++;
 800041a:	3301      	adds	r3, #1
 800041c:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
 800041e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000420:	fa05 f203 	lsl.w	r2, r5, r3
 8000424:	4302      	orrs	r2, r0
 8000426:	600a      	str	r2, [r1, #0]
 8000428:	2214      	movs	r2, #20
 800042a:	4353      	muls	r3, r2
 800042c:	eb08 0003 	add.w	r0, r8, r3
 8000430:	6842      	ldr	r2, [r0, #4]
 8000432:	6891      	ldr	r1, [r2, #8]
 8000434:	60a2      	str	r2, [r4, #8]
 8000436:	60e1      	str	r1, [r4, #12]
 8000438:	6891      	ldr	r1, [r2, #8]
 800043a:	604e      	str	r6, [r1, #4]
 800043c:	6096      	str	r6, [r2, #8]
 800043e:	f858 2003 	ldr.w	r2, [r8, r3]
 8000442:	6160      	str	r0, [r4, #20]
 8000444:	442a      	add	r2, r5
 8000446:	f848 2003 	str.w	r2, [r8, r3]
    taskEXIT_CRITICAL();
 800044a:	f000 fa5b 	bl	8000904 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 800044e:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <xTaskCreate+0x1b4>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	b173      	cbz	r3, 8000472 <xTaskCreate+0x166>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000458:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800045a:	429a      	cmp	r2, r3
 800045c:	d209      	bcs.n	8000472 <xTaskCreate+0x166>
            taskYIELD_IF_USING_PREEMPTION();
 800045e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000466:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800046a:	f3bf 8f4f 	dsb	sy
 800046e:	f3bf 8f6f 	isb	sy
    }
 8000472:	4628      	mov	r0, r5
 8000474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( xSchedulerRunning == pdFALSE )
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <xTaskCreate+0x1b4>)
 800047a:	681a      	ldr	r2, [r3, #0]
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800047c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            if( xSchedulerRunning == pdFALSE )
 800047e:	2a00      	cmp	r2, #0
 8000480:	d1c6      	bne.n	8000410 <xTaskCreate+0x104>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000482:	683a      	ldr	r2, [r7, #0]
 8000484:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000486:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
 8000488:	bf98      	it	ls
 800048a:	603c      	strls	r4, [r7, #0]
 800048c:	e7c0      	b.n	8000410 <xTaskCreate+0x104>
 800048e:	bf00      	nop
 8000490:	20000094 	.word	0x20000094
 8000494:	20000024 	.word	0x20000024
 8000498:	20000030 	.word	0x20000030
 800049c:	200000a8 	.word	0x200000a8
 80004a0:	200000bc 	.word	0x200000bc
 80004a4:	200000e0 	.word	0x200000e0
 80004a8:	2000010c 	.word	0x2000010c
 80004ac:	200000f8 	.word	0x200000f8
 80004b0:	20000028 	.word	0x20000028
 80004b4:	2000002c 	.word	0x2000002c
 80004b8:	200000a0 	.word	0x200000a0
 80004bc:	200000a4 	.word	0x200000a4
 80004c0:	200000f4 	.word	0x200000f4

080004c4 <vTaskStartScheduler>:
{
 80004c4:	b513      	push	{r0, r1, r4, lr}
            xReturn = xTaskCreate( prvIdleTask,
 80004c6:	2400      	movs	r4, #0
 80004c8:	4b10      	ldr	r3, [pc, #64]	; (800050c <vTaskStartScheduler+0x48>)
 80004ca:	2280      	movs	r2, #128	; 0x80
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	4910      	ldr	r1, [pc, #64]	; (8000510 <vTaskStartScheduler+0x4c>)
 80004d0:	4623      	mov	r3, r4
 80004d2:	4810      	ldr	r0, [pc, #64]	; (8000514 <vTaskStartScheduler+0x50>)
 80004d4:	9400      	str	r4, [sp, #0]
 80004d6:	f7ff ff19 	bl	800030c <xTaskCreate>
    if( xReturn == pdPASS )
 80004da:	2801      	cmp	r0, #1
 80004dc:	d111      	bne.n	8000502 <vTaskStartScheduler+0x3e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80004de:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80004e2:	f383 8811 	msr	BASEPRI, r3
 80004e6:	f3bf 8f6f 	isb	sy
 80004ea:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
 80004ee:	f04f 32ff 	mov.w	r2, #4294967295
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <vTaskStartScheduler+0x54>)
 80004f4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <vTaskStartScheduler+0x58>)
 80004f8:	6018      	str	r0, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <vTaskStartScheduler+0x5c>)
 80004fc:	601c      	str	r4, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
 80004fe:	f000 fa53 	bl	80009a8 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <vTaskStartScheduler+0x60>)
 8000504:	681b      	ldr	r3, [r3, #0]
}
 8000506:	b002      	add	sp, #8
 8000508:	bd10      	pop	{r4, pc}
 800050a:	bf00      	nop
 800050c:	200000d0 	.word	0x200000d0
 8000510:	08000edc 	.word	0x08000edc
 8000514:	080002a5 	.word	0x080002a5
 8000518:	200000d4 	.word	0x200000d4
 800051c:	200000f4 	.word	0x200000f4
 8000520:	20000120 	.word	0x20000120
 8000524:	20000000 	.word	0x20000000

08000528 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 8000528:	4a02      	ldr	r2, [pc, #8]	; (8000534 <vTaskSuspendAll+0xc>)
 800052a:	6813      	ldr	r3, [r2, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	6013      	str	r3, [r2, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	2000009c 	.word	0x2000009c

08000538 <xTaskIncrementTick>:
{
 8000538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800053c:	4b4b      	ldr	r3, [pc, #300]	; (800066c <xTaskIncrementTick+0x134>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	f040 808c 	bne.w	800065e <xTaskIncrementTick+0x126>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000546:	4b4a      	ldr	r3, [pc, #296]	; (8000670 <xTaskIncrementTick+0x138>)
 8000548:	681c      	ldr	r4, [r3, #0]
 800054a:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 800054c:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800054e:	b95c      	cbnz	r4, 8000568 <xTaskIncrementTick+0x30>
            taskSWITCH_DELAYED_LISTS();
 8000550:	4a48      	ldr	r2, [pc, #288]	; (8000674 <xTaskIncrementTick+0x13c>)
 8000552:	4b49      	ldr	r3, [pc, #292]	; (8000678 <xTaskIncrementTick+0x140>)
 8000554:	6811      	ldr	r1, [r2, #0]
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	6010      	str	r0, [r2, #0]
 800055a:	4a48      	ldr	r2, [pc, #288]	; (800067c <xTaskIncrementTick+0x144>)
 800055c:	6019      	str	r1, [r3, #0]
 800055e:	6813      	ldr	r3, [r2, #0]
 8000560:	3301      	adds	r3, #1
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	f7ff fe8c 	bl	8000280 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000568:	f8df c114 	ldr.w	ip, [pc, #276]	; 8000680 <xTaskIncrementTick+0x148>
    BaseType_t xSwitchRequired = pdFALSE;
 800056c:	2000      	movs	r0, #0
        if( xConstTickCount >= xNextTaskUnblockTime )
 800056e:	f8dc 3000 	ldr.w	r3, [ip]
 8000572:	4a44      	ldr	r2, [pc, #272]	; (8000684 <xTaskIncrementTick+0x14c>)
 8000574:	429c      	cmp	r4, r3
 8000576:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8000688 <xTaskIncrementTick+0x150>
 800057a:	d20f      	bcs.n	800059c <xTaskIncrementTick+0x64>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800057c:	2114      	movs	r1, #20
 800057e:	f8d9 3000 	ldr.w	r3, [r9]
 8000582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000584:	434b      	muls	r3, r1
 8000586:	58d3      	ldr	r3, [r2, r3]
                    xSwitchRequired = pdTRUE;
 8000588:	2b02      	cmp	r3, #2
                if( xYieldPending != pdFALSE )
 800058a:	4b40      	ldr	r3, [pc, #256]	; (800068c <xTaskIncrementTick+0x154>)
                    xSwitchRequired = pdTRUE;
 800058c:	bf28      	it	cs
 800058e:	2001      	movcs	r0, #1
                if( xYieldPending != pdFALSE )
 8000590:	681b      	ldr	r3, [r3, #0]
                    xSwitchRequired = pdTRUE;
 8000592:	2b00      	cmp	r3, #0
 8000594:	bf18      	it	ne
 8000596:	2001      	movne	r0, #1
}
 8000598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800059c:	4683      	mov	fp, r0
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800059e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8000674 <xTaskIncrementTick+0x13c>
 80005a2:	f8d8 3000 	ldr.w	r3, [r8]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	b923      	cbnz	r3, 80005b4 <xTaskIncrementTick+0x7c>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	f8cc 3000 	str.w	r3, [ip]
                    break;
 80005b2:	e7e3      	b.n	800057c <xTaskIncrementTick+0x44>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80005b4:	f8d8 3000 	ldr.w	r3, [r8]
 80005b8:	68db      	ldr	r3, [r3, #12]
 80005ba:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80005bc:	6859      	ldr	r1, [r3, #4]
                    if( xConstTickCount < xItemValue )
 80005be:	428c      	cmp	r4, r1
 80005c0:	d202      	bcs.n	80005c8 <xTaskIncrementTick+0x90>
                        xNextTaskUnblockTime = xItemValue;
 80005c2:	f8cc 1000 	str.w	r1, [ip]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80005c6:	e7d9      	b.n	800057c <xTaskIncrementTick+0x44>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80005c8:	695d      	ldr	r5, [r3, #20]
 80005ca:	e9d3 1702 	ldrd	r1, r7, [r3, #8]
 80005ce:	608f      	str	r7, [r1, #8]
 80005d0:	6079      	str	r1, [r7, #4]
 80005d2:	6869      	ldr	r1, [r5, #4]
 80005d4:	1d1e      	adds	r6, r3, #4
 80005d6:	42b1      	cmp	r1, r6
 80005d8:	6829      	ldr	r1, [r5, #0]
 80005da:	bf08      	it	eq
 80005dc:	606f      	streq	r7, [r5, #4]
 80005de:	3901      	subs	r1, #1
 80005e0:	f8c3 b014 	str.w	fp, [r3, #20]
 80005e4:	6029      	str	r1, [r5, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80005e6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80005e8:	b195      	cbz	r5, 8000610 <xTaskIncrementTick+0xd8>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80005ea:	e9d3 1707 	ldrd	r1, r7, [r3, #28]
 80005ee:	608f      	str	r7, [r1, #8]
 80005f0:	f8d3 a020 	ldr.w	sl, [r3, #32]
 80005f4:	f103 0718 	add.w	r7, r3, #24
 80005f8:	f8ca 1004 	str.w	r1, [sl, #4]
 80005fc:	6869      	ldr	r1, [r5, #4]
 80005fe:	42b9      	cmp	r1, r7
 8000600:	6829      	ldr	r1, [r5, #0]
 8000602:	bf08      	it	eq
 8000604:	f8c5 a004 	streq.w	sl, [r5, #4]
 8000608:	3901      	subs	r1, #1
 800060a:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
 800060e:	6029      	str	r1, [r5, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000610:	2101      	movs	r1, #1
 8000612:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8000690 <xTaskIncrementTick+0x158>
 8000616:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000618:	f8de 7000 	ldr.w	r7, [lr]
 800061c:	40a9      	lsls	r1, r5
 800061e:	4339      	orrs	r1, r7
 8000620:	f8ce 1000 	str.w	r1, [lr]
 8000624:	2114      	movs	r1, #20
 8000626:	fb01 fa05 	mul.w	sl, r1, r5
 800062a:	eb02 070a 	add.w	r7, r2, sl
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8000634:	6099      	str	r1, [r3, #8]
 8000636:	f8c3 e00c 	str.w	lr, [r3, #12]
 800063a:	f8d1 e008 	ldr.w	lr, [r1, #8]
 800063e:	f8ce 6004 	str.w	r6, [lr, #4]
 8000642:	608e      	str	r6, [r1, #8]
 8000644:	615f      	str	r7, [r3, #20]
 8000646:	f852 300a 	ldr.w	r3, [r2, sl]
 800064a:	3301      	adds	r3, #1
 800064c:	f842 300a 	str.w	r3, [r2, sl]
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000650:	f8d9 3000 	ldr.w	r3, [r9]
 8000654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                xSwitchRequired = pdTRUE;
 8000656:	429d      	cmp	r5, r3
 8000658:	bf28      	it	cs
 800065a:	2001      	movcs	r0, #1
 800065c:	e7a1      	b.n	80005a2 <xTaskIncrementTick+0x6a>
        ++xPendedTicks;
 800065e:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <xTaskIncrementTick+0x15c>)
    BaseType_t xSwitchRequired = pdFALSE;
 8000660:	2000      	movs	r0, #0
        ++xPendedTicks;
 8000662:	6813      	ldr	r3, [r2, #0]
 8000664:	3301      	adds	r3, #1
 8000666:	6013      	str	r3, [r2, #0]
    return xSwitchRequired;
 8000668:	e796      	b.n	8000598 <xTaskIncrementTick+0x60>
 800066a:	bf00      	nop
 800066c:	2000009c 	.word	0x2000009c
 8000670:	20000120 	.word	0x20000120
 8000674:	20000028 	.word	0x20000028
 8000678:	2000002c 	.word	0x2000002c
 800067c:	200000d8 	.word	0x200000d8
 8000680:	200000d4 	.word	0x200000d4
 8000684:	20000030 	.word	0x20000030
 8000688:	20000024 	.word	0x20000024
 800068c:	20000124 	.word	0x20000124
 8000690:	200000a4 	.word	0x200000a4
 8000694:	200000dc 	.word	0x200000dc

08000698 <xTaskResumeAll>:
{
 8000698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    taskENTER_CRITICAL();
 800069c:	f000 f922 	bl	80008e4 <vPortEnterCritical>
        --uxSchedulerSuspended;
 80006a0:	4b3f      	ldr	r3, [pc, #252]	; (80007a0 <xTaskResumeAll+0x108>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	3a01      	subs	r2, #1
 80006a6:	601a      	str	r2, [r3, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	b12b      	cbz	r3, 80006b8 <xTaskResumeAll+0x20>
    BaseType_t xAlreadyYielded = pdFALSE;
 80006ac:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 80006ae:	f000 f929 	bl	8000904 <vPortExitCritical>
}
 80006b2:	4620      	mov	r0, r4
 80006b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80006b8:	4a3a      	ldr	r2, [pc, #232]	; (80007a4 <xTaskResumeAll+0x10c>)
 80006ba:	6812      	ldr	r2, [r2, #0]
 80006bc:	2a00      	cmp	r2, #0
 80006be:	d0f5      	beq.n	80006ac <xTaskResumeAll+0x14>
                    prvAddTaskToReadyList( pxTCB );
 80006c0:	f04f 0c01 	mov.w	ip, #1
 80006c4:	f04f 0e14 	mov.w	lr, #20
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80006c8:	4d37      	ldr	r5, [pc, #220]	; (80007a8 <xTaskResumeAll+0x110>)
                    prvAddTaskToReadyList( pxTCB );
 80006ca:	4e38      	ldr	r6, [pc, #224]	; (80007ac <xTaskResumeAll+0x114>)
 80006cc:	4938      	ldr	r1, [pc, #224]	; (80007b0 <xTaskResumeAll+0x118>)
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80006ce:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80007b4 <xTaskResumeAll+0x11c>
                        xYieldPending = pdTRUE;
 80006d2:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80007b8 <xTaskResumeAll+0x120>
 80006d6:	e040      	b.n	800075a <xTaskResumeAll+0xc2>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80006d8:	68eb      	ldr	r3, [r5, #12]
 80006da:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80006dc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80006de:	e9d3 2407 	ldrd	r2, r4, [r3, #28]
 80006e2:	6094      	str	r4, [r2, #8]
 80006e4:	6062      	str	r2, [r4, #4]
 80006e6:	6842      	ldr	r2, [r0, #4]
 80006e8:	f103 0718 	add.w	r7, r3, #24
 80006ec:	42ba      	cmp	r2, r7
 80006ee:	f04f 0200 	mov.w	r2, #0
 80006f2:	bf08      	it	eq
 80006f4:	6044      	streq	r4, [r0, #4]
 80006f6:	629a      	str	r2, [r3, #40]	; 0x28
 80006f8:	6802      	ldr	r2, [r0, #0]
 80006fa:	3a01      	subs	r2, #1
 80006fc:	6002      	str	r2, [r0, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80006fe:	6958      	ldr	r0, [r3, #20]
 8000700:	e9d3 2402 	ldrd	r2, r4, [r3, #8]
 8000704:	6094      	str	r4, [r2, #8]
 8000706:	6062      	str	r2, [r4, #4]
 8000708:	6842      	ldr	r2, [r0, #4]
 800070a:	f103 0a04 	add.w	sl, r3, #4
 800070e:	4552      	cmp	r2, sl
 8000710:	6802      	ldr	r2, [r0, #0]
 8000712:	bf08      	it	eq
 8000714:	6044      	streq	r4, [r0, #4]
 8000716:	3a01      	subs	r2, #1
 8000718:	6002      	str	r2, [r0, #0]
                    prvAddTaskToReadyList( pxTCB );
 800071a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800071c:	6834      	ldr	r4, [r6, #0]
 800071e:	fa0c f200 	lsl.w	r2, ip, r0
 8000722:	4322      	orrs	r2, r4
 8000724:	fb0e f400 	mul.w	r4, lr, r0
 8000728:	190f      	adds	r7, r1, r4
 800072a:	6032      	str	r2, [r6, #0]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	f8c3 b00c 	str.w	fp, [r3, #12]
 8000738:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800073c:	f8cb a004 	str.w	sl, [fp, #4]
 8000740:	f8c2 a008 	str.w	sl, [r2, #8]
 8000744:	590a      	ldr	r2, [r1, r4]
 8000746:	615f      	str	r7, [r3, #20]
 8000748:	3201      	adds	r2, #1
 800074a:	510a      	str	r2, [r1, r4]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800074c:	f8d8 2000 	ldr.w	r2, [r8]
 8000750:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000752:	4290      	cmp	r0, r2
 8000754:	d301      	bcc.n	800075a <xTaskResumeAll+0xc2>
                        xYieldPending = pdTRUE;
 8000756:	f8c9 c000 	str.w	ip, [r9]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800075a:	682a      	ldr	r2, [r5, #0]
 800075c:	2a00      	cmp	r2, #0
 800075e:	d1bb      	bne.n	80006d8 <xTaskResumeAll+0x40>
                if( pxTCB != NULL )
 8000760:	b10b      	cbz	r3, 8000766 <xTaskResumeAll+0xce>
                    prvResetNextTaskUnblockTime();
 8000762:	f7ff fd8d 	bl	8000280 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000766:	4d15      	ldr	r5, [pc, #84]	; (80007bc <xTaskResumeAll+0x124>)
 8000768:	682c      	ldr	r4, [r5, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
 800076a:	b144      	cbz	r4, 800077e <xTaskResumeAll+0xe6>
                                xYieldPending = pdTRUE;
 800076c:	2701      	movs	r7, #1
 800076e:	4e12      	ldr	r6, [pc, #72]	; (80007b8 <xTaskResumeAll+0x120>)
                            if( xTaskIncrementTick() != pdFALSE )
 8000770:	f7ff fee2 	bl	8000538 <xTaskIncrementTick>
 8000774:	b100      	cbz	r0, 8000778 <xTaskResumeAll+0xe0>
                                xYieldPending = pdTRUE;
 8000776:	6037      	str	r7, [r6, #0]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000778:	3c01      	subs	r4, #1
 800077a:	d1f9      	bne.n	8000770 <xTaskResumeAll+0xd8>
                        xPendedTicks = 0;
 800077c:	602c      	str	r4, [r5, #0]
                if( xYieldPending != pdFALSE )
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <xTaskResumeAll+0x120>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d092      	beq.n	80006ac <xTaskResumeAll+0x14>
                    taskYIELD_IF_USING_PREEMPTION();
 8000786:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800078a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800078e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000792:	f3bf 8f4f 	dsb	sy
 8000796:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
 800079a:	2401      	movs	r4, #1
 800079c:	e787      	b.n	80006ae <xTaskResumeAll+0x16>
 800079e:	bf00      	nop
 80007a0:	2000009c 	.word	0x2000009c
 80007a4:	20000094 	.word	0x20000094
 80007a8:	200000e0 	.word	0x200000e0
 80007ac:	200000a4 	.word	0x200000a4
 80007b0:	20000030 	.word	0x20000030
 80007b4:	20000024 	.word	0x20000024
 80007b8:	20000124 	.word	0x20000124
 80007bc:	200000dc 	.word	0x200000dc

080007c0 <vTaskDelay>:
    {
 80007c0:	b508      	push	{r3, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 80007c2:	b950      	cbnz	r0, 80007da <vTaskDelay+0x1a>
            portYIELD_WITHIN_API();
 80007c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80007c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80007d0:	f3bf 8f4f 	dsb	sy
 80007d4:	f3bf 8f6f 	isb	sy
    }
 80007d8:	bd08      	pop	{r3, pc}
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80007da:	2100      	movs	r1, #0
            vTaskSuspendAll();
 80007dc:	f7ff fea4 	bl	8000528 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80007e0:	f7ff fcfc 	bl	80001dc <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 80007e4:	f7ff ff58 	bl	8000698 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 80007e8:	2800      	cmp	r0, #0
 80007ea:	d0eb      	beq.n	80007c4 <vTaskDelay+0x4>
 80007ec:	e7f4      	b.n	80007d8 <vTaskDelay+0x18>
	...

080007f0 <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <vTaskSwitchContext+0x4c>)
{
 80007f2:	b530      	push	{r4, r5, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <vTaskSwitchContext+0x50>)
 80007f8:	b112      	cbz	r2, 8000800 <vTaskSwitchContext+0x10>
        xYieldPending = pdTRUE;
 80007fa:	2201      	movs	r2, #1
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80007fc:	601a      	str	r2, [r3, #0]
}
 80007fe:	bd30      	pop	{r4, r5, pc}
        xYieldPending = pdFALSE;
 8000800:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <vTaskSwitchContext+0x54>)
 8000804:	681b      	ldr	r3, [r3, #0]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000806:	fab3 f383 	clz	r3, r3
 800080a:	2514      	movs	r5, #20
 800080c:	b2db      	uxtb	r3, r3
 800080e:	f1c3 031f 	rsb	r3, r3, #31
 8000812:	fb05 f203 	mul.w	r2, r5, r3
 8000816:	490c      	ldr	r1, [pc, #48]	; (8000848 <vTaskSwitchContext+0x58>)
 8000818:	1888      	adds	r0, r1, r2
 800081a:	6844      	ldr	r4, [r0, #4]
 800081c:	3208      	adds	r2, #8
 800081e:	6864      	ldr	r4, [r4, #4]
 8000820:	440a      	add	r2, r1
 8000822:	4294      	cmp	r4, r2
 8000824:	fb05 1103 	mla	r1, r5, r3, r1
 8000828:	bf08      	it	eq
 800082a:	6862      	ldreq	r2, [r4, #4]
 800082c:	6044      	str	r4, [r0, #4]
 800082e:	bf08      	it	eq
 8000830:	6042      	streq	r2, [r0, #4]
 8000832:	684b      	ldr	r3, [r1, #4]
 8000834:	68da      	ldr	r2, [r3, #12]
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <vTaskSwitchContext+0x5c>)
 8000838:	e7e0      	b.n	80007fc <vTaskSwitchContext+0xc>
 800083a:	bf00      	nop
 800083c:	2000009c 	.word	0x2000009c
 8000840:	20000124 	.word	0x20000124
 8000844:	200000a4 	.word	0x200000a4
 8000848:	20000030 	.word	0x20000030
 800084c:	20000024 	.word	0x20000024

08000850 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    volatile uint32_t ulDummy = 0UL;
 8000850:	2300      	movs	r3, #0
{
 8000852:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0UL;
 8000854:	9301      	str	r3, [sp, #4]
        __asm volatile
 8000856:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800085a:	f383 8811 	msr	BASEPRI, r3
 800085e:	f3bf 8f6f 	isb	sy
 8000862:	f3bf 8f4f 	dsb	sy
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000866:	9b01      	ldr	r3, [sp, #4]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0fc      	beq.n	8000866 <prvTaskExitError+0x16>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800086c:	b002      	add	sp, #8
 800086e:	4770      	bx	lr

08000870 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000870:	4806      	ldr	r0, [pc, #24]	; (800088c <prvPortStartFirstTask+0x1c>)
 8000872:	6800      	ldr	r0, [r0, #0]
 8000874:	6800      	ldr	r0, [r0, #0]
 8000876:	f380 8808 	msr	MSP, r0
 800087a:	b662      	cpsie	i
 800087c:	b661      	cpsie	f
 800087e:	f3bf 8f4f 	dsb	sy
 8000882:	f3bf 8f6f 	isb	sy
 8000886:	df00      	svc	0
 8000888:	bf00      	nop
 800088a:	0000      	.short	0x0000
 800088c:	e000ed08 	.word	0xe000ed08

08000890 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000890:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000894:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <pxPortInitialiseStack+0x20>)
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800089a:	f021 0101 	bic.w	r1, r1, #1
 800089e:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80008a2:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80008a6:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80008aa:	3840      	subs	r0, #64	; 0x40
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	08000851 	.word	0x08000851
	...

080008c0 <SVC_Handler>:
    __asm volatile (
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <pxCurrentTCBConst2>)
 80008c2:	6819      	ldr	r1, [r3, #0]
 80008c4:	6808      	ldr	r0, [r1, #0]
 80008c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80008ca:	f380 8809 	msr	PSP, r0
 80008ce:	f3bf 8f6f 	isb	sy
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f380 8811 	msr	BASEPRI, r0
 80008da:	f04e 0e0d 	orr.w	lr, lr, #13
 80008de:	4770      	bx	lr

080008e0 <pxCurrentTCBConst2>:
 80008e0:	20000024 	.word	0x20000024

080008e4 <vPortEnterCritical>:
 80008e4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80008e8:	f383 8811 	msr	BASEPRI, r3
 80008ec:	f3bf 8f6f 	isb	sy
 80008f0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80008f4:	4a02      	ldr	r2, [pc, #8]	; (8000900 <vPortEnterCritical+0x1c>)
 80008f6:	6813      	ldr	r3, [r2, #0]
 80008f8:	3301      	adds	r3, #1
 80008fa:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000004 	.word	0x20000004

08000904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8000904:	4a03      	ldr	r2, [pc, #12]	; (8000914 <vPortExitCritical+0x10>)
 8000906:	6813      	ldr	r3, [r2, #0]
 8000908:	3b01      	subs	r3, #1
 800090a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800090c:	b90b      	cbnz	r3, 8000912 <vPortExitCritical+0xe>
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800090e:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8000912:	4770      	bx	lr
 8000914:	20000004 	.word	0x20000004
	...

08000920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000920:	f3ef 8009 	mrs	r0, PSP
 8000924:	f3bf 8f6f 	isb	sy
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <pxCurrentTCBConst>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000930:	6010      	str	r0, [r2, #0]
 8000932:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000936:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800093a:	f380 8811 	msr	BASEPRI, r0
 800093e:	f7ff ff57 	bl	80007f0 <vTaskSwitchContext>
 8000942:	f04f 0000 	mov.w	r0, #0
 8000946:	f380 8811 	msr	BASEPRI, r0
 800094a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800094e:	6819      	ldr	r1, [r3, #0]
 8000950:	6808      	ldr	r0, [r1, #0]
 8000952:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000956:	f380 8809 	msr	PSP, r0
 800095a:	f3bf 8f6f 	isb	sy
 800095e:	4770      	bx	lr

08000960 <pxCurrentTCBConst>:
 8000960:	20000024 	.word	0x20000024

08000964 <SysTick_Handler>:
    );
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000964:	b508      	push	{r3, lr}
        __asm volatile
 8000966:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800096a:	f383 8811 	msr	BASEPRI, r3
 800096e:	f3bf 8f6f 	isb	sy
 8000972:	f3bf 8f4f 	dsb	sy
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000976:	f7ff fddf 	bl	8000538 <xTaskIncrementTick>
 800097a:	b128      	cbz	r0, 8000988 <SysTick_Handler+0x24>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800097c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000984:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
        __asm volatile
 8000988:	2300      	movs	r3, #0
 800098a:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800098e:	bd08      	pop	{r3, pc}

08000990 <vPortSetupTimerInterrupt>:
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000990:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000998:	619a      	str	r2, [r3, #24]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800099a:	4a02      	ldr	r2, [pc, #8]	; (80009a4 <vPortSetupTimerInterrupt+0x14>)
 800099c:	615a      	str	r2, [r3, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800099e:	2207      	movs	r2, #7
 80009a0:	611a      	str	r2, [r3, #16]
}
 80009a2:	4770      	bx	lr
 80009a4:	0001193f 	.word	0x0001193f

080009a8 <xPortStartScheduler>:
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80009a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 80009ac:	b510      	push	{r4, lr}
    uxCriticalNesting = 0;
 80009ae:	2400      	movs	r4, #0
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80009b0:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80009b4:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 80009b8:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80009bc:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80009c0:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80009c4:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
    vPortSetupTimerInterrupt();
 80009c8:	f7ff ffe2 	bl	8000990 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <xPortStartScheduler+0x38>)
 80009ce:	601c      	str	r4, [r3, #0]
    prvPortStartFirstTask();
 80009d0:	f7ff ff4e 	bl	8000870 <prvPortStartFirstTask>
    vTaskSwitchContext();
 80009d4:	f7ff ff0c 	bl	80007f0 <vTaskSwitchContext>
    prvTaskExitError();
 80009d8:	f7ff ff3a 	bl	8000850 <prvTaskExitError>
}
 80009dc:	4620      	mov	r0, r4
 80009de:	bd10      	pop	{r4, pc}
 80009e0:	20000004 	.word	0x20000004

080009e4 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80009e4:	b510      	push	{r4, lr}
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <prvInsertBlockIntoFreeList+0x44>)
 80009e8:	461a      	mov	r2, r3
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4283      	cmp	r3, r0
 80009ee:	d3fb      	bcc.n	80009e8 <prvInsertBlockIntoFreeList+0x4>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80009f0:	6854      	ldr	r4, [r2, #4]
 80009f2:	1911      	adds	r1, r2, r4
 80009f4:	4288      	cmp	r0, r1
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80009f6:	bf01      	itttt	eq
 80009f8:	6841      	ldreq	r1, [r0, #4]
 80009fa:	4610      	moveq	r0, r2
 80009fc:	1909      	addeq	r1, r1, r4
 80009fe:	6051      	streq	r1, [r2, #4]

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a00:	6844      	ldr	r4, [r0, #4]
 8000a02:	1901      	adds	r1, r0, r4
 8000a04:	428b      	cmp	r3, r1
 8000a06:	d10c      	bne.n	8000a22 <prvInsertBlockIntoFreeList+0x3e>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a08:	4908      	ldr	r1, [pc, #32]	; (8000a2c <prvInsertBlockIntoFreeList+0x48>)
 8000a0a:	6809      	ldr	r1, [r1, #0]
 8000a0c:	428b      	cmp	r3, r1
 8000a0e:	d003      	beq.n	8000a18 <prvInsertBlockIntoFreeList+0x34>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a10:	6859      	ldr	r1, [r3, #4]
 8000a12:	4421      	add	r1, r4
 8000a14:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a16:	6819      	ldr	r1, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8000a18:	4290      	cmp	r0, r2
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000a1a:	6001      	str	r1, [r0, #0]
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000a1c:	bf18      	it	ne
 8000a1e:	6010      	strne	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000a20:	bd10      	pop	{r4, pc}
 8000a22:	4619      	mov	r1, r3
 8000a24:	e7f8      	b.n	8000a18 <prvInsertBlockIntoFreeList+0x34>
 8000a26:	bf00      	nop
 8000a28:	20002140 	.word	0x20002140
 8000a2c:	20000128 	.word	0x20000128

08000a30 <pvPortMalloc>:
{
 8000a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a34:	4605      	mov	r5, r0
    vTaskSuspendAll();
 8000a36:	f7ff fd77 	bl	8000528 <vTaskSuspendAll>
        if( pxEnd == NULL )
 8000a3a:	4938      	ldr	r1, [pc, #224]	; (8000b1c <pvPortMalloc+0xec>)
 8000a3c:	4c38      	ldr	r4, [pc, #224]	; (8000b20 <pvPortMalloc+0xf0>)
 8000a3e:	680b      	ldr	r3, [r1, #0]
 8000a40:	bb0b      	cbnz	r3, 8000a86 <pvPortMalloc+0x56>
    uxAddress = ( size_t ) ucHeap;
 8000a42:	4a38      	ldr	r2, [pc, #224]	; (8000b24 <pvPortMalloc+0xf4>)
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a44:	4e38      	ldr	r6, [pc, #224]	; (8000b28 <pvPortMalloc+0xf8>)
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a46:	0750      	lsls	r0, r2, #29
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a48:	bf1f      	itttt	ne
 8000a4a:	1dd0      	addne	r0, r2, #7
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a4c:	f020 0007 	bicne.w	r0, r0, #7
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a50:	f502 5200 	addne.w	r2, r2, #8192	; 0x2000
 8000a54:	1a13      	subne	r3, r2, r0
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a56:	bf0c      	ite	eq
 8000a58:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a5c:	4602      	movne	r2, r0
    xStart.xBlockSize = ( size_t ) 0;
 8000a5e:	2000      	movs	r0, #0
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a60:	4413      	add	r3, r2
    uxAddress -= xHeapStructSize;
 8000a62:	3b08      	subs	r3, #8
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a64:	f023 0307 	bic.w	r3, r3, #7
    xStart.xBlockSize = ( size_t ) 0;
 8000a68:	6070      	str	r0, [r6, #4]
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a6a:	6032      	str	r2, [r6, #0]
    pxEnd->pxNextFreeBlock = NULL;
 8000a6c:	e9c3 0000 	strd	r0, r0, [r3]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a70:	1a98      	subs	r0, r3, r2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a72:	e9c2 3000 	strd	r3, r0, [r2]
    pxEnd = ( void * ) uxAddress;
 8000a76:	600b      	str	r3, [r1, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a78:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <pvPortMalloc+0xfc>)
 8000a7a:	6018      	str	r0, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <pvPortMalloc+0x100>)
 8000a7e:	6018      	str	r0, [r3, #0]
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000a84:	6023      	str	r3, [r4, #0]
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000a86:	6827      	ldr	r7, [r4, #0]
 8000a88:	ea17 0405 	ands.w	r4, r7, r5
 8000a8c:	d144      	bne.n	8000b18 <pvPortMalloc+0xe8>
            if( ( xWantedSize > 0 ) &&
 8000a8e:	1e6b      	subs	r3, r5, #1
 8000a90:	330a      	adds	r3, #10
 8000a92:	d808      	bhi.n	8000aa6 <pvPortMalloc+0x76>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000a94:	076b      	lsls	r3, r5, #29
                xWantedSize += xHeapStructSize;
 8000a96:	f105 0208 	add.w	r2, r5, #8
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000a9a:	d009      	beq.n	8000ab0 <pvPortMalloc+0x80>
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8000a9c:	f022 0307 	bic.w	r3, r2, #7
 8000aa0:	3308      	adds	r3, #8
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d805      	bhi.n	8000ab2 <pvPortMalloc+0x82>
    ( void ) xTaskResumeAll();
 8000aa6:	f7ff fdf7 	bl	8000698 <xTaskResumeAll>
}
 8000aaa:	4620      	mov	r0, r4
 8000aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ab0:	4613      	mov	r3, r2
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000ab2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8000b30 <pvPortMalloc+0x100>
 8000ab6:	f8d8 6000 	ldr.w	r6, [r8]
 8000aba:	429e      	cmp	r6, r3
 8000abc:	d32c      	bcc.n	8000b18 <pvPortMalloc+0xe8>
                pxBlock = xStart.pxNextFreeBlock;
 8000abe:	4a1a      	ldr	r2, [pc, #104]	; (8000b28 <pvPortMalloc+0xf8>)
 8000ac0:	6815      	ldr	r5, [r2, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000ac2:	6868      	ldr	r0, [r5, #4]
 8000ac4:	4298      	cmp	r0, r3
 8000ac6:	d201      	bcs.n	8000acc <pvPortMalloc+0x9c>
 8000ac8:	682c      	ldr	r4, [r5, #0]
 8000aca:	bb14      	cbnz	r4, 8000b12 <pvPortMalloc+0xe2>
                if( pxBlock != pxEnd )
 8000acc:	6809      	ldr	r1, [r1, #0]
 8000ace:	42a9      	cmp	r1, r5
 8000ad0:	d022      	beq.n	8000b18 <pvPortMalloc+0xe8>
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000ad2:	6829      	ldr	r1, [r5, #0]
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000ad4:	6814      	ldr	r4, [r2, #0]
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000ad6:	6011      	str	r1, [r2, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000ad8:	1ac2      	subs	r2, r0, r3
 8000ada:	2a10      	cmp	r2, #16
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000adc:	f104 0408 	add.w	r4, r4, #8
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000ae0:	d904      	bls.n	8000aec <pvPortMalloc+0xbc>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000ae2:	18e8      	adds	r0, r5, r3
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000ae4:	6042      	str	r2, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8000ae6:	606b      	str	r3, [r5, #4]
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000ae8:	f7ff ff7c 	bl	80009e4 <prvInsertBlockIntoFreeList>
                    pxBlock->pxNextFreeBlock = NULL;
 8000aec:	2300      	movs	r3, #0
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000aee:	686a      	ldr	r2, [r5, #4]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000af0:	490e      	ldr	r1, [pc, #56]	; (8000b2c <pvPortMalloc+0xfc>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000af2:	1ab6      	subs	r6, r6, r2
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000af4:	4317      	orrs	r7, r2
                    xNumberOfSuccessfulAllocations++;
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <pvPortMalloc+0x104>)
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000af8:	6808      	ldr	r0, [r1, #0]
                    pxBlock->pxNextFreeBlock = NULL;
 8000afa:	602b      	str	r3, [r5, #0]
                    xNumberOfSuccessfulAllocations++;
 8000afc:	6813      	ldr	r3, [r2, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000afe:	4286      	cmp	r6, r0
                    xNumberOfSuccessfulAllocations++;
 8000b00:	f103 0301 	add.w	r3, r3, #1
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000b04:	f8c8 6000 	str.w	r6, [r8]
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000b08:	bf38      	it	cc
 8000b0a:	600e      	strcc	r6, [r1, #0]
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000b0c:	606f      	str	r7, [r5, #4]
                    xNumberOfSuccessfulAllocations++;
 8000b0e:	6013      	str	r3, [r2, #0]
 8000b10:	e7c9      	b.n	8000aa6 <pvPortMalloc+0x76>
 8000b12:	462a      	mov	r2, r5
 8000b14:	4625      	mov	r5, r4
 8000b16:	e7d4      	b.n	8000ac2 <pvPortMalloc+0x92>
    void * pvReturn = NULL;
 8000b18:	2400      	movs	r4, #0
 8000b1a:	e7c4      	b.n	8000aa6 <pvPortMalloc+0x76>
 8000b1c:	20000128 	.word	0x20000128
 8000b20:	2000212c 	.word	0x2000212c
 8000b24:	2000012c 	.word	0x2000012c
 8000b28:	20002140 	.word	0x20002140
 8000b2c:	20002134 	.word	0x20002134
 8000b30:	20002130 	.word	0x20002130
 8000b34:	20002138 	.word	0x20002138

08000b38 <vPortFree>:
{
 8000b38:	b510      	push	{r4, lr}
    if( pv != NULL )
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	b300      	cbz	r0, 8000b80 <vPortFree+0x48>
        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000b3e:	4a11      	ldr	r2, [pc, #68]	; (8000b84 <vPortFree+0x4c>)
 8000b40:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8000b44:	6812      	ldr	r2, [r2, #0]
 8000b46:	4213      	tst	r3, r2
 8000b48:	d01a      	beq.n	8000b80 <vPortFree+0x48>
            if( pxLink->pxNextFreeBlock == NULL )
 8000b4a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8000b4e:	b9b9      	cbnz	r1, 8000b80 <vPortFree+0x48>
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000b50:	ea23 0302 	bic.w	r3, r3, r2
 8000b54:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
 8000b58:	f7ff fce6 	bl	8000528 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <vPortFree+0x50>)
 8000b5e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8000b62:	6811      	ldr	r1, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000b64:	f1a4 0008 	sub.w	r0, r4, #8
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000b68:	440b      	add	r3, r1
 8000b6a:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000b6c:	f7ff ff3a 	bl	80009e4 <prvInsertBlockIntoFreeList>
}
 8000b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                    xNumberOfSuccessfulFrees++;
 8000b74:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <vPortFree+0x54>)
 8000b76:	6813      	ldr	r3, [r2, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
 8000b7c:	f7ff bd8c 	b.w	8000698 <xTaskResumeAll>
}
 8000b80:	bd10      	pop	{r4, pc}
 8000b82:	bf00      	nop
 8000b84:	2000212c 	.word	0x2000212c
 8000b88:	20002130 	.word	0x20002130
 8000b8c:	2000213c 	.word	0x2000213c

08000b90 <EXTI0_IRQHandler>:
/* ISR FUNCTIONS */
/*==========================================================*/
void EXTI0_IRQHandler(void)
{
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8000b90:	4a03      	ldr	r2, [pc, #12]	; (8000ba0 <EXTI0_IRQHandler+0x10>)
 8000b92:	6953      	ldr	r3, [r2, #20]
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[0]();
 8000b9a:	4b02      	ldr	r3, [pc, #8]	; (8000ba4 <EXTI0_IRQHandler+0x14>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4718      	bx	r3
 8000ba0:	40010400 	.word	0x40010400
 8000ba4:	20002148 	.word	0x20002148

08000ba8 <EXTI1_IRQHandler>:
}

void EXTI1_IRQHandler(void)
{
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<1);
 8000ba8:	4a03      	ldr	r2, [pc, #12]	; (8000bb8 <EXTI1_IRQHandler+0x10>)
 8000baa:	6953      	ldr	r3, [r2, #20]
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[1]();
 8000bb2:	4b02      	ldr	r3, [pc, #8]	; (8000bbc <EXTI1_IRQHandler+0x14>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	4718      	bx	r3
 8000bb8:	40010400 	.word	0x40010400
 8000bbc:	20002148 	.word	0x20002148

08000bc0 <EXTI2_IRQHandler>:
}

void EXTI2_IRQHandler(void)
{
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<2);
 8000bc0:	4a03      	ldr	r2, [pc, #12]	; (8000bd0 <EXTI2_IRQHandler+0x10>)
 8000bc2:	6953      	ldr	r3, [r2, #20]
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[2]();
 8000bca:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <EXTI2_IRQHandler+0x14>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	4718      	bx	r3
 8000bd0:	40010400 	.word	0x40010400
 8000bd4:	20002148 	.word	0x20002148

08000bd8 <EXTI3_IRQHandler>:
}

void EXTI3_IRQHandler(void)
{
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<3);
 8000bd8:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <EXTI3_IRQHandler+0x10>)
 8000bda:	6953      	ldr	r3, [r2, #20]
 8000bdc:	f043 0308 	orr.w	r3, r3, #8
 8000be0:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[3]();
 8000be2:	4b02      	ldr	r3, [pc, #8]	; (8000bec <EXTI3_IRQHandler+0x14>)
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	4718      	bx	r3
 8000be8:	40010400 	.word	0x40010400
 8000bec:	20002148 	.word	0x20002148

08000bf0 <EXTI4_IRQHandler>:
}

void EXTI4_IRQHandler(void)
{
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<4);
 8000bf0:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <EXTI4_IRQHandler+0x10>)
 8000bf2:	6953      	ldr	r3, [r2, #20]
 8000bf4:	f043 0310 	orr.w	r3, r3, #16
 8000bf8:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[4]();
 8000bfa:	4b02      	ldr	r3, [pc, #8]	; (8000c04 <EXTI4_IRQHandler+0x14>)
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	4718      	bx	r3
 8000c00:	40010400 	.word	0x40010400
 8000c04:	20002148 	.word	0x20002148

08000c08 <EXTI9_5_IRQHandler>:
}

void EXTI9_5_IRQHandler(void)
{
 8000c08:	b510      	push	{r4, lr}
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	if(EXTI->PR & 1<<5) { EXTI->PR |=(1<<5) ; GP_IRQ_CALLBACK[5](); }
 8000c0a:	4c1b      	ldr	r4, [pc, #108]	; (8000c78 <EXTI9_5_IRQHandler+0x70>)
 8000c0c:	6963      	ldr	r3, [r4, #20]
 8000c0e:	069b      	lsls	r3, r3, #26
 8000c10:	d506      	bpl.n	8000c20 <EXTI9_5_IRQHandler+0x18>
 8000c12:	6963      	ldr	r3, [r4, #20]
 8000c14:	f043 0320 	orr.w	r3, r3, #32
 8000c18:	6163      	str	r3, [r4, #20]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <EXTI9_5_IRQHandler+0x74>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR |=(1<<6) ; GP_IRQ_CALLBACK[6](); }
 8000c20:	6963      	ldr	r3, [r4, #20]
 8000c22:	0658      	lsls	r0, r3, #25
 8000c24:	d506      	bpl.n	8000c34 <EXTI9_5_IRQHandler+0x2c>
 8000c26:	6963      	ldr	r3, [r4, #20]
 8000c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2c:	6163      	str	r3, [r4, #20]
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <EXTI9_5_IRQHandler+0x74>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR |=(1<<7) ; GP_IRQ_CALLBACK[7](); }
 8000c34:	6963      	ldr	r3, [r4, #20]
 8000c36:	0619      	lsls	r1, r3, #24
 8000c38:	d506      	bpl.n	8000c48 <EXTI9_5_IRQHandler+0x40>
 8000c3a:	6963      	ldr	r3, [r4, #20]
 8000c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c40:	6163      	str	r3, [r4, #20]
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <EXTI9_5_IRQHandler+0x74>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR |=(1<<8) ; GP_IRQ_CALLBACK[8](); }
 8000c48:	6963      	ldr	r3, [r4, #20]
 8000c4a:	05da      	lsls	r2, r3, #23
 8000c4c:	d506      	bpl.n	8000c5c <EXTI9_5_IRQHandler+0x54>
 8000c4e:	6963      	ldr	r3, [r4, #20]
 8000c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c54:	6163      	str	r3, [r4, #20]
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <EXTI9_5_IRQHandler+0x74>)
 8000c58:	6a1b      	ldr	r3, [r3, #32]
 8000c5a:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR |=(1<<9) ; GP_IRQ_CALLBACK[9](); }
 8000c5c:	6963      	ldr	r3, [r4, #20]
 8000c5e:	059b      	lsls	r3, r3, #22
 8000c60:	d508      	bpl.n	8000c74 <EXTI9_5_IRQHandler+0x6c>
 8000c62:	6963      	ldr	r3, [r4, #20]
 8000c64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c68:	6163      	str	r3, [r4, #20]
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <EXTI9_5_IRQHandler+0x74>)

}
 8000c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(EXTI->PR & 1<<9) { EXTI->PR |=(1<<9) ; GP_IRQ_CALLBACK[9](); }
 8000c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c72:	4718      	bx	r3
}
 8000c74:	bd10      	pop	{r4, pc}
 8000c76:	bf00      	nop
 8000c78:	40010400 	.word	0x40010400
 8000c7c:	20002148 	.word	0x20002148

08000c80 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8000c80:	4a02      	ldr	r2, [pc, #8]	; (8000c8c <EXTI15_10_IRQHandler+0xc>)
 8000c82:	6953      	ldr	r3, [r2, #20]
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6153      	str	r3, [r2, #20]

}
 8000c8a:	4770      	bx	lr
 8000c8c:	40010400 	.word	0x40010400

08000c90 <USART1_IRQHandler>:


//ISR
void USART1_IRQHandler(void)
{
	Global_UART_Config[0].P_IRQ_Call_Back ();
 8000c90:	4b01      	ldr	r3, [pc, #4]	; (8000c98 <USART1_IRQHandler+0x8>)
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	4718      	bx	r3
 8000c96:	bf00      	nop
 8000c98:	20002184 	.word	0x20002184

08000c9c <USART2_IRQHandler>:

}

void USART2_IRQHandler(void)
{
	Global_UART_Config[1].P_IRQ_Call_Back ();
 8000c9c:	4b01      	ldr	r3, [pc, #4]	; (8000ca4 <USART2_IRQHandler+0x8>)
 8000c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca0:	4718      	bx	r3
 8000ca2:	bf00      	nop
 8000ca4:	20002184 	.word	0x20002184

08000ca8 <USART3_IRQHandler>:

}

void USART3_IRQHandler(void)
{
	Global_UART_Config[2].P_IRQ_Call_Back ();
 8000ca8:	4b01      	ldr	r3, [pc, #4]	; (8000cb0 <USART3_IRQHandler+0x8>)
 8000caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cac:	4718      	bx	r3
 8000cae:	bf00      	nop
 8000cb0:	20002184 	.word	0x20002184

08000cb4 <Get_CRLH_Postion>:
#include "STM32F103C6_GPIO_DRIVERS.h"


uint8_t Get_CRLH_Postion(uint16_t PinNumber)
{
	switch (PinNumber)
 8000cb4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000cb8:	d02e      	beq.n	8000d18 <Get_CRLH_Postion+0x64>
 8000cba:	d814      	bhi.n	8000ce6 <Get_CRLH_Postion+0x32>
 8000cbc:	2810      	cmp	r0, #16
 8000cbe:	d038      	beq.n	8000d32 <Get_CRLH_Postion+0x7e>
 8000cc0:	d808      	bhi.n	8000cd4 <Get_CRLH_Postion+0x20>
 8000cc2:	2804      	cmp	r0, #4
 8000cc4:	d02a      	beq.n	8000d1c <Get_CRLH_Postion+0x68>
 8000cc6:	2808      	cmp	r0, #8
 8000cc8:	d02e      	beq.n	8000d28 <Get_CRLH_Postion+0x74>
 8000cca:	1e82      	subs	r2, r0, #2
 8000ccc:	4250      	negs	r0, r2
 8000cce:	4150      	adcs	r0, r2
 8000cd0:	0080      	lsls	r0, r0, #2
 8000cd2:	4770      	bx	lr
 8000cd4:	2840      	cmp	r0, #64	; 0x40
 8000cd6:	d02b      	beq.n	8000d30 <Get_CRLH_Postion+0x7c>
 8000cd8:	2880      	cmp	r0, #128	; 0x80
 8000cda:	d021      	beq.n	8000d20 <Get_CRLH_Postion+0x6c>
	case GPIO_PIN_4:
		return 16;
		break;

	case GPIO_PIN_5:
		return 20;
 8000cdc:	2820      	cmp	r0, #32
 8000cde:	bf14      	ite	ne
 8000ce0:	2000      	movne	r0, #0
 8000ce2:	2014      	moveq	r0, #20
 8000ce4:	4770      	bx	lr
	switch (PinNumber)
 8000ce6:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000cea:	d01b      	beq.n	8000d24 <Get_CRLH_Postion+0x70>
 8000cec:	d80b      	bhi.n	8000d06 <Get_CRLH_Postion+0x52>
 8000cee:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8000cf2:	d019      	beq.n	8000d28 <Get_CRLH_Postion+0x74>
 8000cf4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8000cf8:	d018      	beq.n	8000d2c <Get_CRLH_Postion+0x78>
 8000cfa:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8000cfe:	4258      	negs	r0, r3
 8000d00:	4158      	adcs	r0, r3
 8000d02:	00c0      	lsls	r0, r0, #3
 8000d04:	4770      	bx	lr
 8000d06:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8000d0a:	d011      	beq.n	8000d30 <Get_CRLH_Postion+0x7c>
	case GPIO_PIN_6:
		return 24;
		break;

	case GPIO_PIN_7:
		return 28;
 8000d0c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000d10:	bf14      	ite	ne
 8000d12:	2000      	movne	r0, #0
 8000d14:	201c      	moveq	r0, #28
 8000d16:	4770      	bx	lr
	switch (PinNumber)
 8000d18:	2004      	movs	r0, #4
 8000d1a:	4770      	bx	lr
		return 8;
 8000d1c:	2008      	movs	r0, #8
 8000d1e:	4770      	bx	lr
		return 28;
 8000d20:	201c      	movs	r0, #28
 8000d22:	4770      	bx	lr
		return 20;
 8000d24:	2014      	movs	r0, #20
 8000d26:	4770      	bx	lr
		return 12;
 8000d28:	200c      	movs	r0, #12
 8000d2a:	4770      	bx	lr
		return 16;
 8000d2c:	2010      	movs	r0, #16
 8000d2e:	4770      	bx	lr
		return 24;
 8000d30:	2018      	movs	r0, #24
	default:
		return 0;
		break;

	}
}
 8000d32:	4770      	bx	lr

08000d34 <MCAL_GPIO_Init>:
 * note -                   -stmf103c6 MCU has GPIO A,B,C,D,E Modules
 *                           but LQFP48 Package has only GPIO A,B, Part of C/D exported external pins
 */
/**================================================================= */
void MCAL_GPIO_Init( GPIO_TypeDef *GPIOx , GPIO_Pin_Configure_t *Pin_Config )
{
 8000d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//We Determine The Position Should Write On It In  configuration register By Determine First Position Pin

	volatile uint32_t *ConfigureRegister = NULL;
	uint8_t   ConfigurePin=0;     //In This Variable We Store The Configure Pin

	ConfigureRegister = (Pin_Config->GPIO_Pin_Number < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000d36:	880e      	ldrh	r6, [r1, #0]
{
 8000d38:	4604      	mov	r4, r0
	ConfigureRegister = (Pin_Config->GPIO_Pin_Number < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000d3a:	2eff      	cmp	r6, #255	; 0xff
 8000d3c:	bf94      	ite	ls
 8000d3e:	4605      	movls	r5, r0
 8000d40:	1d05      	addhi	r5, r0, #4
	//Clear CNF & MODE
	*(ConfigureRegister) &=~(0xf<<Get_CRLH_Postion(Pin_Config->GPIO_Pin_Number));
 8000d42:	4630      	mov	r0, r6
 8000d44:	f7ff ffb6 	bl	8000cb4 <Get_CRLH_Postion>
 8000d48:	220f      	movs	r2, #15
 8000d4a:	682b      	ldr	r3, [r5, #0]
 8000d4c:	4082      	lsls	r2, r0
 8000d4e:	ea23 0302 	bic.w	r3, r3, r2
 8000d52:	602b      	str	r3, [r5, #0]

	if (Pin_Config->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_AF_PP || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_OD || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_PP)
 8000d54:	788b      	ldrb	r3, [r1, #2]
 8000d56:	1f1a      	subs	r2, r3, #4
 8000d58:	b2d7      	uxtb	r7, r2
 8000d5a:	2f03      	cmp	r7, #3
 8000d5c:	d809      	bhi.n	8000d72 <MCAL_GPIO_Init+0x3e>
	{

		//I sure The User Want Make The Pin As Output & in Case Output Should Configure Mode(Speed) & CNF(State)
		ConfigurePin = ((( (Pin_Config->GPIO_MODE - 4)<<2) |(Pin_Config->GPIO_OUTPUT_SPEED)) & 0x0f); //Shift 2 to Set The CNF Bits
 8000d5e:	78cb      	ldrb	r3, [r1, #3]
 8000d60:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8000d64:	f003 030f 	and.w	r3, r3, #15
				GPIOx->ODR &=~(Pin_Config->GPIO_Pin_Number);//Not Making Shifting because The Pin Number Already Shifted in Header
			}
		}
	}
	//Write On CRH Or CLH
	*(ConfigureRegister) |=( ConfigurePin << Get_CRLH_Postion(Pin_Config->GPIO_Pin_Number) );
 8000d68:	682a      	ldr	r2, [r5, #0]
 8000d6a:	4083      	lsls	r3, r0
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	602b      	str	r3, [r5, #0]
}
 8000d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(Pin_Config->GPIO_MODE == GPIO_MODE_INPUT_FLO || GPIO_MODE_Analog)
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d009      	beq.n	8000d8a <MCAL_GPIO_Init+0x56>
		else if(Pin_Config->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8000d76:	2b08      	cmp	r3, #8
 8000d78:	d007      	beq.n	8000d8a <MCAL_GPIO_Init+0x56>
			if(Pin_Config->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000d7a:	2b02      	cmp	r3, #2
				GPIOx->ODR |=(Pin_Config->GPIO_Pin_Number); //Not Making Shifting because The Pin Number Already Shifted in Header
 8000d7c:	68e3      	ldr	r3, [r4, #12]
 8000d7e:	bf0c      	ite	eq
 8000d80:	4333      	orreq	r3, r6
				GPIOx->ODR &=~(Pin_Config->GPIO_Pin_Number);//Not Making Shifting because The Pin Number Already Shifted in Header
 8000d82:	43b3      	bicne	r3, r6
 8000d84:	60e3      	str	r3, [r4, #12]
			ConfigurePin = ( (((GPIO_MODE_INPUT_PU)<<2  ) |  0x0) & 0x0f);
 8000d86:	2308      	movs	r3, #8
 8000d88:	e7ee      	b.n	8000d68 <MCAL_GPIO_Init+0x34>
			ConfigurePin = (( ( (Pin_Config->GPIO_MODE) <<2) | 0x0) & 0x0F);      //Shift 2 to Set The CNF Bits
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	e7ec      	b.n	8000d68 <MCAL_GPIO_Init+0x34>

08000d8e <MCAL_GPIO_WritePin>:
/**================================================================= */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx , uint16_t Pin_Number , uint8_t Value)
{
	if(Value != GPIO_PIN_FALSE )
	{
		GPIOx->ODR |=(uint32_t) (Pin_Number);
 8000d8e:	68c3      	ldr	r3, [r0, #12]
	if(Value != GPIO_PIN_FALSE )
 8000d90:	b112      	cbz	r2, 8000d98 <MCAL_GPIO_WritePin+0xa>
		GPIOx->ODR |=(uint32_t) (Pin_Number);
 8000d92:	430b      	orrs	r3, r1
	}
	else
	{
		GPIOx->ODR &=~(uint32_t)(Pin_Number);
 8000d94:	60c3      	str	r3, [r0, #12]
	}
}
 8000d96:	4770      	bx	lr
		GPIOx->ODR &=~(uint32_t)(Pin_Number);
 8000d98:	ea23 0301 	bic.w	r3, r3, r1
 8000d9c:	e7fa      	b.n	8000d94 <MCAL_GPIO_WritePin+0x6>
	...

08000da0 <vHelloBlinkingLedHandler>:
	return 0;

}

void vHelloBlinkingLedHandler(void *parms)
{
 8000da0:	b508      	push	{r3, lr}

	while(1)
	{
		MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000da2:	4c0a      	ldr	r4, [pc, #40]	; (8000dcc <vHelloBlinkingLedHandler+0x2c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000daa:	4620      	mov	r0, r4
 8000dac:	f7ff ffef 	bl	8000d8e <MCAL_GPIO_WritePin>
		vTaskDelay(50);
 8000db0:	2032      	movs	r0, #50	; 0x32
 8000db2:	f7ff fd05 	bl	80007c0 <vTaskDelay>
		MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000db6:	4620      	mov	r0, r4
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dbe:	f7ff ffe6 	bl	8000d8e <MCAL_GPIO_WritePin>
		vTaskDelay(50);
 8000dc2:	2032      	movs	r0, #50	; 0x32
 8000dc4:	f7ff fcfc 	bl	80007c0 <vTaskDelay>
	while(1)
 8000dc8:	e7ec      	b.n	8000da4 <vHelloBlinkingLedHandler+0x4>
 8000dca:	bf00      	nop
 8000dcc:	40011000 	.word	0x40011000

08000dd0 <HW_Init>:
{
 8000dd0:	b507      	push	{r0, r1, r2, lr}
	PIN13CFG.GPIO_Pin_Number = GPIO_PIN_13;
 8000dd2:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <HW_Init+0x14>)
	MCAL_GPIO_Init(GPIOC, &PIN13CFG);
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <HW_Init+0x18>)
 8000dd6:	a901      	add	r1, sp, #4
	PIN13CFG.GPIO_Pin_Number = GPIO_PIN_13;
 8000dd8:	9301      	str	r3, [sp, #4]
	MCAL_GPIO_Init(GPIOC, &PIN13CFG);
 8000dda:	f7ff ffab 	bl	8000d34 <MCAL_GPIO_Init>
}
 8000dde:	b003      	add	sp, #12
 8000de0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000de4:	01042000 	.word	0x01042000
 8000de8:	40011000 	.word	0x40011000

08000dec <main>:
{
 8000dec:	b507      	push	{r0, r1, r2, lr}
	RCC_GPIOC_CLOCK_EN();
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <main+0x2c>)
 8000df0:	6993      	ldr	r3, [r2, #24]
 8000df2:	f043 0310 	orr.w	r3, r3, #16
 8000df6:	6193      	str	r3, [r2, #24]
	HW_Init();
 8000df8:	f7ff ffea 	bl	8000dd0 <HW_Init>
	xTaskCreate(vHelloBlinkingLedHandler, "BlinkingLED", 128, NULL, 1, vHelloBlinkingLed);
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <main+0x30>)
 8000dfe:	2280      	movs	r2, #128	; 0x80
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4907      	ldr	r1, [pc, #28]	; (8000e20 <main+0x34>)
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	2301      	movs	r3, #1
 8000e08:	4806      	ldr	r0, [pc, #24]	; (8000e24 <main+0x38>)
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f7ff fa7d 	bl	800030c <xTaskCreate>
	vTaskStartScheduler();
 8000e12:	f7ff fb57 	bl	80004c4 <vTaskStartScheduler>
	while(1)
 8000e16:	e7fe      	b.n	8000e16 <main+0x2a>
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	200021c0 	.word	0x200021c0
 8000e20:	08000ee1 	.word	0x08000ee1
 8000e24:	08000da1 	.word	0x08000da1

08000e28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e2c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <LoopForever+0xe>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	; (8000e74 <LoopForever+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e56:	f000 f811 	bl	8000e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e5a:	f7ff ffc7 	bl	8000dec <main>

08000e5e <LoopForever>:

LoopForever:
  b LoopForever
 8000e5e:	e7fe      	b.n	8000e5e <LoopForever>
  ldr   r0, =_estack
 8000e60:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000e6c:	08000ef8 	.word	0x08000ef8
  ldr r2, =_sbss
 8000e70:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000e74:	200021c4 	.word	0x200021c4

08000e78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC1_2_IRQHandler>
	...

08000e7c <__libc_init_array>:
 8000e7c:	b570      	push	{r4, r5, r6, lr}
 8000e7e:	2600      	movs	r6, #0
 8000e80:	4d0c      	ldr	r5, [pc, #48]	; (8000eb4 <__libc_init_array+0x38>)
 8000e82:	4c0d      	ldr	r4, [pc, #52]	; (8000eb8 <__libc_init_array+0x3c>)
 8000e84:	1b64      	subs	r4, r4, r5
 8000e86:	10a4      	asrs	r4, r4, #2
 8000e88:	42a6      	cmp	r6, r4
 8000e8a:	d109      	bne.n	8000ea0 <__libc_init_array+0x24>
 8000e8c:	f000 f81a 	bl	8000ec4 <_init>
 8000e90:	2600      	movs	r6, #0
 8000e92:	4d0a      	ldr	r5, [pc, #40]	; (8000ebc <__libc_init_array+0x40>)
 8000e94:	4c0a      	ldr	r4, [pc, #40]	; (8000ec0 <__libc_init_array+0x44>)
 8000e96:	1b64      	subs	r4, r4, r5
 8000e98:	10a4      	asrs	r4, r4, #2
 8000e9a:	42a6      	cmp	r6, r4
 8000e9c:	d105      	bne.n	8000eaa <__libc_init_array+0x2e>
 8000e9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ea4:	4798      	blx	r3
 8000ea6:	3601      	adds	r6, #1
 8000ea8:	e7ee      	b.n	8000e88 <__libc_init_array+0xc>
 8000eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eae:	4798      	blx	r3
 8000eb0:	3601      	adds	r6, #1
 8000eb2:	e7f2      	b.n	8000e9a <__libc_init_array+0x1e>
 8000eb4:	08000ef0 	.word	0x08000ef0
 8000eb8:	08000ef0 	.word	0x08000ef0
 8000ebc:	08000ef0 	.word	0x08000ef0
 8000ec0:	08000ef4 	.word	0x08000ef4

08000ec4 <_init>:
 8000ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec6:	bf00      	nop
 8000ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eca:	bc08      	pop	{r3}
 8000ecc:	469e      	mov	lr, r3
 8000ece:	4770      	bx	lr

08000ed0 <_fini>:
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed2:	bf00      	nop
 8000ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ed6:	bc08      	pop	{r3}
 8000ed8:	469e      	mov	lr, r3
 8000eda:	4770      	bx	lr
